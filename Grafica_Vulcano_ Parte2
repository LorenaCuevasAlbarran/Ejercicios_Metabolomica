#Creador: Lorena Cuevas
#Gráfica de Volcano

#install.packages("pacman") 

library(pacman) 

p_load ("readr",  #llamar a bases de datos         
        "ggplot2", #para graficar
        "ggrepel", #para etiquetar datos en una gráfica
        "matrixTests", #oara realizar una prueba de estadística
        "dplyr") #facilita el manejo de datos 

datos <-read_csv(file="https://raw.githubusercontent.com/ManuelLaraMVZ/Transcript-mica/main/DesnutridasvsEunutridas.csv") 

#extracción de genes contoles (referencia) 

Controles <- datos%>% #ordenar tablas en filas y columnas  
  filter(Condicion=="Control") #filtrar en base a una condicion  

head(Controles) 

#sacar promedios  

promedios_controles  <- Controles%>%   
  
  summarise(Mean_C1=mean(Cx1),             
            Mean_C2=mean(Cx2),             
            Mean_C3=mean(Cx3),             
            Mean_T1=mean(T1),             
            Mean_T2=mean(T2),             
            Mean_T3=mean(T3)) %>%   
  mutate(Gen="Promedio_controles") %>% #para generar la columna    
  select(7,1,2,3,4,5,6) #para pasarlo al inicio 

promedios_controles 

##################################################### 

#extraer los genes de la tabla "datos" 

genes <- datos%>%   
  filter (Condicion=="Target") %>%    
  select(-2) 

head(genes) 

#################################################### 

#Sacar el 2^`-DCT 

DCT <- genes %>%    
  mutate(DCT_C1=2^-(Cx1-promedios_controles$Mean_C1),          
         DCT_C2=2^-(Cx2-promedios_controles$Mean_C2),          
         DCT_C3=2^-(Cx3-promedios_controles$Mean_C3),          
         DCT_T1=2^-(T1-promedios_controles$Mean_T1),          
         DCT_T2=2^-(T2-promedios_controles$Mean_T2),          
         DCT_T3=2^-(T3-promedios_controles$Mean_T3),) %>%    
  select(-2,-3,-4,-5,-6,-7) 

DCT 

#se obtuvieron los alores de DCT para cada analísis, #pero queremos agruparlo 

promedio_genes <- DCT %>%    
  mutate(Mean_DCT_Cx=(DCT_C1+DCT_C2+DCT_C3)/3,          
         Mean_DCT_Tx=(DCT_T1+DCT_T2+DCT_T3)/3) 

promedio_genes 

#Definir prueba estadística: t-Student

tvalue_gen <- row_t_welch(promedio_genes[,c("DCT_C1",  #row: para sacar las nuevas filas; ,c: para sacar las nuevas columnas
                                            "DCT_C2",
                                            "DCT_C3")],
                          promedio_genes[,c("DCT_T1",
                                            "DCT_T2",
                                            "DCT_T3")])

View(tvalue_gen)

#Crear una nueva base de datos 

FCyPV <- promedio_genes %>% 
  select(1,8,9) %>% 
  mutate(p_value = tvalue_gen$pvalue,
         Fold_change = Mean_DCT_Tx/Mean_DCT_Cx) %>% 
  select(1,4,5)

FCyPV

#Sacar los logaritmos 

Logs <- FCyPV %>% 
  mutate(LPV = -log10(p_value),  #eje y = -log10(p-value)
         LFC = log2(Fold_change)) %>%  #eje x = log2(Fold change)
  select(1,4,5)

Logs

#Gráfica de Volcano 

vulcano <- ggplot(Logs, mapping = aes(x = LFC,
                                      y = LPV))+
  geom_point(size = 2,
             color = "gray")+
  theme_classic()+
  labs(title = "Análisis comparativo de miRNAs",
       caption = "Creador: Lorena Cuevas",
       x = "log2(2-DDCT)",
       y = "-log10(valor de p)")

vulcano

#Límites de la gráfica para los genes que se estan reprimiendo o sobreexpresando de forma significativa

limite_p <- 0.05 #valor mínimo significativo para determinar las diferencias entre dos tratamientos

limite_FC <- 1.5 #se obtiene al obtner Tx/Cx, si es el mismo valor es =1, si es diferente se reprime con -.5 y se sobreexpresa con +.5

down_regulated <- Logs %>% 
  filter(LFC < -log2(limite_FC),
         LPV > -log10(limite_p))

down_regulated

up_regulated <- Logs %>% 
  filter(LFC > log2(limite_FC),
         LPV > -log10(limite_p))

up_regulated

#Ordenar 

top_down_regulated <- down_regulated %>% 
  arrange(desc(LPV)) %>% 
  head(10)

top_down_regulated

top_up_regulated <- up_regulated %>% 
  arrange(desc(LPV)) %>% 
  head(10)

top_up_regulated

#Mejorar la gráfica

vulcano2 <- vulcano+
  geom_hline(yintercept = -log10(limite_p),
             linetype = "dashed") +
  geom_vline(xintercept = c(-log2(limite_FC), log2(limite_FC)), 
             linetype = "dashed")

vulcano2

#Cambio de color a los puntos significativos

vulcano3 <- vulcano2+
  geom_point(data = up_regulated,
             x = up_regulated$LFC,
             y = up_regulated$LPV,
             alpha = 1,
             size = 3,
             color = "#E64B35B2")+
  geom_point(data = down_regulated,
             x = down_regulated$LFC,
             y = down_regulated$LPV,
             alpha = 1,
             size = 3,
             color = "#3C5488B2")

vulcano3

#Crear etiquetas a los genes identificados como reprimidos/sobreexpresados

vulcano4 <- vulcano3+
  geom_label_repel(data = top_up_regulated,
                   mapping = aes(x = top_up_regulated$LFC,
                                 y = top_up_regulated$LPV),
                   label = top_up_regulated$Gen, 
                   max.overlaps = 100)+
  geom_label_repel(data = top_down_regulated,
                   mapping = aes(x = top_down_regulated$LFC,
                                 y = top_down_regulated$LPV),
                   label = top_down_regulated$Gen, 
                   max.overlaps = 100)

vulcano4

ggsave("Vulcano4.jpeg", 
       plot = vulcano4,
       height = 5, width = 6,
       dpi = 300)
